--implicit cursor

declare
    var_rows number;

begin
    select avg(salary) into var_rows from employee;
    dbms_output.put_line( var_rows); 
    -- implicit plsql cursor attrubutes
    -- dbms_output.put_line(sql%isopen);--true cursor is open can't be logged
    -- dbms_output.put_line((sql%found));--true for any effected row
    -- dbms_output.put_line(sql%notfound);--true for no effected row
    dbms_output.put_line(TO_CHAR(sql%rowcount));--0 if no row effected,1 if any rows effected
exception
    when others then
        -- sqlcode(gives error code can be searched on web), and sqlerrm(gives error message)
       dbms_output.put_line(sqlcode);  
       dbms_output.put_line(sqlerrm);  
end;
        
create table employee(
name varchar2(20), slary number);

begin
    for i in 1..10 loop
        insert into employee values('Jhon'||to_char(i),1300321*i);
    end loop;
end;


declare
   cursor employees is select * from employee;
   emprecord employees%rowtype;
begin
    open employees;
    loop 
        fetch employees into emprecord;
            exit when employees%notfound;
            dbms_output.put_line(emprecord.name || ' ' || emprecord.slary);
    end loop;
    close employees;
end;
     
     
--some err, explicit cursor 
     
declare
   --underlying data is locked until cursor is closed, to terminate it use rollback and commit.
   cursor emp is select * from employee for update of name,slary;
begin
    open emp;
    
    update employee 
    set name=upper(name), slary=slary+100 
    where current of emp;
    -- commit;
    close emp;
end;  


--explicit cursor with parameter

declare
   --underlying data is locked until cursor is closed, to terminate it use rollback and commit.
   cursor emp(vname employee.name%type) 
   is select * from employee 
   where name=vname 
   for update of slary;
   emprecords employee%rowtype;
begin
    open emp('Jhon1');
    loop 
        
        fetch emp into emprecords;
        exit when emp%notfound;
        update employee 
        set  slary=slary*2 
        where current of emp;
    end loop;
    
    -- commit;
    close emp;
end;  
